using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using CSharp_WPF_L3._2.src;

namespace CSharp_WPF_L3._2
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public List<ToDo> TodoList;
        public MainWindow()
        {
            InitializeComponent();
           TodoList = new List<ToDo>();
            TodoList.Add(new ToDo("Дело 1","Описание", new DateTime(2024,01,10)));
            TodoList.Add(new ToDo("Дело 1", "Описание", new DateTime(2024, 01, 10)));
            TodoList.Add(new ToDo("Дело 1", "Описание", new DateTime(2024, 01, 10)));

            listToDo.ItemsSource = TodoList;
        }
        private void DeleteJob(object sender, ExecutedRoutedEventArgs e)
        {
            TodoList.Remove(listToDo.SelectedItem as ToDo);
            listToDo.ItemsSource = null;
            listToDo.ItemsSource = TodoList;
        }
        private void OpenWindow(object sender, RoutedEventArgs e)
        {
            Window1 window1 = new Window1();
            window1.Owner = this;
            window1.Show();
        }
        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
            if(listToDo.SelectedItem != null) 
            {
                (listToDo.SelectedItem as ToDo).Done = true;
            }
        }
        private void CheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            if (listToDo.SelectedItem != null)
            {
                (listToDo.SelectedItem as ToDo).Done = false;
            }
        }
    }
}
/// основные св-ва окна Icon - иконка в левом верхнем левом углу экрана и в панели задач.
/// Св-ва Top и Left задают отступ от верхней и левой границы экраны.
/// Св-во ResizeMode - задает режим изменения режимов окна. Может принемать следующие значения:
/// CanMinimaize - окно можно только свернуть, 
/// NoResize - нельзя изменить начальные размеры, 
///     CanResize - менять размеры можно, 
///     CanResizeWithGrip - в правом нижнем углу окна появляется визуализация того, что у окна можно изменять размеры.
/// Св-во Title - заголовок окна.
/// Св-во WindowState - состояние окна. Возможные значения:
///     Maximized - раскрыто на весь экран, 
///     Minimized - свернуто, 
///     Normal - стандартное состояние.
/// В процессе работы окно проходит ряд этапов, которые могут быть доступны через обработку событий класса Window: 
///     Initialized - это событие возникает при инициализации окна, когда у него устанавливаются все св-ва, но до применения к нему стилей и привязки данных, 
///     Loaded - возникает после полной инициализации окна и применения к нему стилей и привязки данных. После генерации этого события
/// происходит визуализация элемента, и окно отображается на экране и становится видимым для пользователя, 
/// Closing - возникает при закрытии окна, 
/// Closed - возникает, когда окно становится закрытым,
/// Unloaded - возникает после закрытия окна при выгрузке всех связанных ресурсов из памяти.
///     
/// 
/// 
///  Работа с файловой системой
/// 
/// Методы класса File:
/// 
///     -Copy(Исходный путь файла, финальный путь файла) - копирует файл в новое место. Если файл с таким названием уже существует в конечной директори, то вызывается исключение.
///     -Create(путь к файлу) - создает файл. Если файл с таким названием уже существует в конечной директори, то он перезаписывается.
///     -Delete(путь к файлу) - удаляет файл.
///     -Move(исходный путь файла, финальный путь файла) перемещает файл в новое место. Может переименовать перемещаемый файл.
///     -Exists(путь к файлу) - определяет, существует ли указанный файл.
///     -Close() - закрывает поток, который открывается при использовании большинства методов для работы с файлами. Необходимо вызывать данный метод для высвобождения процессорного времени и 
///завершения работы с файлом.
///     -AppendAllLines(путь к файлу,список строк) - добавляет в файл набор строк. Если файл не существует, то он создает.
///     -AppendAllText(путь к файлу, строка для записи) - добавляет в файл строку. Если файл не существует, то он создается.
///     -string[] ReadAllLines (путь к файлу) - считывает содержимое текстового файла в массив строк.
///     -string ReadAllText(путь к файлу) - считывает содержимое текстового файла в строку.
///     -void WriteAllLines(путь к файлу, массив строк) - записывают массив строк в текстовый файл. Если файл не существует, он создается. Если существует, то перезаписывается.
///     -WriteAllText(путь к файлу, строка для записи) - записывают строку в текстовый файл. Если файл не существует, он создается. Если существует, то перезаписывается.
///     
/// System.IO методы:
/// 
///     Directory.GetCurrentDirectory() - позволяет получить текущую директорию приложения.
///     System.IO.Path.Combine(строка_1,...,строка_4) - комбинирует от двух до четырех строк в виде пути к файлу.
/// 
/// Использование диалоговых окон
///     
///   Список основных св-тв класса SaveFileDialog:
///     -DefaultDirectory - устанавливает каталог, который будет открыт в диалоговом окне по умолчанию.
///     -FileName - хранит или устанавливает строку с полным путем до выбранного файла(в том числе и расширение)
///     -Filter - устанавливает возможные расширения файлов в диалоговом окне. Пример: "Normal text file (*.txt|*.txt". Первая часть до вертикальной черты определяет заголовок фильтра, а после -
/// расширение, которого требуется отображать. Если требуется более одного фильтра, то ставится еще одна вертикальная черта и пишется новый фильтр.
///     -OverwritePrompt - устанавливает, будет ли выводится предупреждение о перезаписи существующего файла. По умолчанию true.
///     -SaveFileDialoge - содержит только название созданного файла.
///     Title - устанавливает заголовок диалогового окна.
///     Чтобы вызвать диалоговое окно, используется метод ShowDialog, после чего можно проверить, выбран ли объект, сравнив результат с метода с true.
///     
/// Работы с форматом JSON
/// 
///     - string JsonSerializer.Serialize(объект сериализации) - для формирования строки в формате JSON(сериализации) - для формировния строки в формате JSON (сериализация)
///     - T JsoneSerializer.Deserialize<T>(строка в формате JSON) - для преобразования строки формата JSON в тип T (десериализация). Здесь важно уточнить, что для десериализации нужно, чтобы у 
/// Класса  T был объявлен пустой конструктор.
/// 
/// Команды в WPF 
/// 
///     
/// 
///     
/// 
/// 
/// 
/// 